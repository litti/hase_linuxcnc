#******************************
# ATC  SETUP
#******************************

# INTRODUCTION
#
# This machine uses two different ways to actuate the atc mechanism (i.e. the drawbar)
# A) Manual interaction by the operator using a pushbutton mounted on the Z axis
# B) Automatic interaction using the toolchange macro for M6 remap using motion.digitial-pins
#
# For safe operation of the drawbar, the spindle MUST STOP before actuating the drawbar.
# The most relevant signal that is available for this is from the VFD: wj200-vfd.0.is-running which is mapped to signal: spindle-running

# Sequence of checks is as follows
# 1. provide toggle to process the push button signal and maintain a constant state
#  during manual interaction spindle-running = LOW is checked as a redundancy
# 2. Evaluate signaltrain from both manual and automatic interaction AND check against spindle-running using lut5 (2nd redundancy)
# Thereby creating the spindle-release-tool signal (and its inverted state drawbar_is_closed)

# For automatic interaction only one pin remains, which gives the machine a trigger signal to open or close similar to the toggled manual interaction signal

#*******************
# 1. provide toggle to process the push button signal and maintain a constant state
#*******************
# 1.1 create lut5 lut5.manualatctoggle to ensure, that atc toogle will only be evaluated positive, when spindle-running = 0
# output of lut5.manualatctoggle high, when
# in0 (spindle-running) low 0
# in1 (atc_toogle_button) high 1
# corresponds to 10 = 1 --> 0x4
addf lut5.manualatctoggle servo-thread
setp lut5.manualatctoggle.function 0x4
net spindle-running => lut5.manualatctoggle.in-0
net atc_manual_toogle_button => lut5.manualatctoggle.in-1

# 1.2 use a toggle component to allow triggering of atc via pushbutton without having to hold the button
# signal lut5.manualatctoggle = trigger signal for manual control 
# signal_toogle_manualatc is the signal that holds the state for the manual release of the tool changer

addf toogle_manualatc servo-thread
net toggle_lut5_manualatctoggle lut5.manualatctoggle.out <= toogle_manualatc.in
net signal_toogle_manualatc toogle_manualatc.out 


# When signal_toogle_manualatc = high ==> release a tool
# We need an inverted atc_toogleout signal for some pins
#addf n_atctoggle servo-thread
#net signal_toogle_manualatc <= n_atctoggle.in
#net signal_toogle_manualatc_inverted => n_atctoggle.out


#*******************
# 2. Evaluate signaltrain from both manual and automatic interaction 
#*******************
# 2.1 Signal handling
# signal_toogle_manualatc is the signal for manual atc release
# motion.digital-out-01 is the pin that is used for automatic triggering using GCODE
# spindle-running is the check signal to ensure that the spindle is not running

# Load lut5 Tables
addf lut5.spindle-release-tool servo-thread
# output of lut5.spindle-release-tool HIGH when
# in0 signal_toogle_manualatc = HIGH 
# in1 motion.digital-out-01 = HIGH (or signal_toogle_manualatc; both ok too)
# in2 spindle-running = LOW
# corresponds to 1110 = hex E 
setp lut5.spindle-release-tool.function 0xE
net signal_toogle_manualatc lut5.spindle-release-tool.in-0
net signal_automatic_atc motion.digital-out-01 lut5.spindle-release-tool.in-1
net spindle-running  lut5.spindle-release-tool.in-2

# 2.1 spindle-release-tool signal
net spindle-release-tool lut5.spindle-release-tool.out

# Invert the spindle-release-tool signal to create the opposing signal
addf spindle-clamp-tool servo-thread
net spindle-release-tool => spindle-clamp-tool.in
net drawbar_is_closed <= spindle-clamp-tool.out


# This is a map of the pocketprepnumber to an analog pin to correctly transfer the informaton into the M6 remap as the regular handler appears to be broken
addf s32float.tool servo-thread
net pocketprepnumer s32float.tool.in
net transferpocket2 s32float.tool.out motion.analog-in-00
